// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// blockParticleFilter
List blockParticleFilter(int N, int n, List blocks, List fParams, List gParams, bool resampling);
RcppExport SEXP _SMC5_blockParticleFilter(SEXP NSEXP, SEXP nSEXP, SEXP blocksSEXP, SEXP fParamsSEXP, SEXP gParamsSEXP, SEXP resamplingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< List >::type blocks(blocksSEXP);
    Rcpp::traits::input_parameter< List >::type fParams(fParamsSEXP);
    Rcpp::traits::input_parameter< List >::type gParams(gParamsSEXP);
    Rcpp::traits::input_parameter< bool >::type resampling(resamplingSEXP);
    rcpp_result_gen = Rcpp::wrap(blockParticleFilter(N, n, blocks, fParams, gParams, resampling));
    return rcpp_result_gen;
END_RCPP
}
// sequentialImportanceSampling
List sequentialImportanceSampling(int N, int n, List fParams, List gParams);
RcppExport SEXP _SMC5_sequentialImportanceSampling(SEXP NSEXP, SEXP nSEXP, SEXP fParamsSEXP, SEXP gParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< List >::type fParams(fParamsSEXP);
    Rcpp::traits::input_parameter< List >::type gParams(gParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(sequentialImportanceSampling(N, n, fParams, gParams));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapParticleFilter
List bootstrapParticleFilter(int N, int n, List fParams, List gParams);
RcppExport SEXP _SMC5_bootstrapParticleFilter(SEXP NSEXP, SEXP nSEXP, SEXP fParamsSEXP, SEXP gParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< List >::type fParams(fParamsSEXP);
    Rcpp::traits::input_parameter< List >::type gParams(gParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapParticleFilter(N, n, fParams, gParams));
    return rcpp_result_gen;
END_RCPP
}
// KalmanFilterCpp
List KalmanFilterCpp(arma::vec& m_0, arma::mat& C_0, arma::mat& F_matrix, arma::mat& G, arma::mat& V, arma::mat& W, arma::mat& y);
RcppExport SEXP _SMC5_KalmanFilterCpp(SEXP m_0SEXP, SEXP C_0SEXP, SEXP F_matrixSEXP, SEXP GSEXP, SEXP VSEXP, SEXP WSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type m_0(m_0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C_0(C_0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F_matrix(F_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(KalmanFilterCpp(m_0, C_0, F_matrix, G, V, W, y));
    return rcpp_result_gen;
END_RCPP
}
// KalmanSmoothingCpp
List KalmanSmoothingCpp(arma::colvec& m_0, arma::mat& C_0, arma::mat& F_matrix, arma::mat& G, arma::mat& V, arma::mat& W, arma::mat& y);
RcppExport SEXP _SMC5_KalmanSmoothingCpp(SEXP m_0SEXP, SEXP C_0SEXP, SEXP F_matrixSEXP, SEXP GSEXP, SEXP VSEXP, SEXP WSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type m_0(m_0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type C_0(C_0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F_matrix(F_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(KalmanSmoothingCpp(m_0, C_0, F_matrix, G, V, W, y));
    return rcpp_result_gen;
END_RCPP
}
// KalmanSamplerCpp
arma::mat KalmanSamplerCpp(int n, List kalmanRes, int time);
RcppExport SEXP _SMC5_KalmanSamplerCpp(SEXP nSEXP, SEXP kalmanResSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< List >::type kalmanRes(kalmanResSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(KalmanSamplerCpp(n, kalmanRes, time));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrmArma
arma::vec dmvnrmArma(arma::mat& x, arma::rowvec& mean, arma::mat& sigma, bool logd, bool diag);
RcppExport SEXP _SMC5_dmvnrmArma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrmArma(x, mean, sigma, logd, diag));
    return rcpp_result_gen;
END_RCPP
}
// dnrmArma
double dnrmArma(double x, double mean, double sigma, bool logd);
RcppExport SEXP _SMC5_dnrmArma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dnrmArma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(int n, arma::rowvec& mean, arma::mat& sigma, bool diag);
RcppExport SEXP _SMC5_mvrnormArma(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mean, sigma, diag));
    return rcpp_result_gen;
END_RCPP
}
// rnormArma
arma::colvec rnormArma(int n, double mean, double sigma);
RcppExport SEXP _SMC5_rnormArma(SEXP nSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rnormArma(n, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// logAddition
double logAddition(double x, double y);
RcppExport SEXP _SMC5_logAddition(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(logAddition(x, y));
    return rcpp_result_gen;
END_RCPP
}
// logAdditionSum
double logAdditionSum(arma::vec& x);
RcppExport SEXP _SMC5_logAdditionSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logAdditionSum(x));
    return rcpp_result_gen;
END_RCPP
}
// ProbSampleReplace
arma::uvec ProbSampleReplace(int nOrig, int size, arma::vec prob);
RcppExport SEXP _SMC5_ProbSampleReplace(SEXP nOrigSEXP, SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nOrig(nOrigSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(ProbSampleReplace(nOrig, size, prob));
    return rcpp_result_gen;
END_RCPP
}
// checkDiagonal
bool checkDiagonal(arma::mat& X);
RcppExport SEXP _SMC5_checkDiagonal(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(checkDiagonal(X));
    return rcpp_result_gen;
END_RCPP
}
// checkSymmetric
bool checkSymmetric(arma::mat& X);
RcppExport SEXP _SMC5_checkSymmetric(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(checkSymmetric(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SMC5_blockParticleFilter", (DL_FUNC) &_SMC5_blockParticleFilter, 6},
    {"_SMC5_sequentialImportanceSampling", (DL_FUNC) &_SMC5_sequentialImportanceSampling, 4},
    {"_SMC5_bootstrapParticleFilter", (DL_FUNC) &_SMC5_bootstrapParticleFilter, 4},
    {"_SMC5_KalmanFilterCpp", (DL_FUNC) &_SMC5_KalmanFilterCpp, 7},
    {"_SMC5_KalmanSmoothingCpp", (DL_FUNC) &_SMC5_KalmanSmoothingCpp, 7},
    {"_SMC5_KalmanSamplerCpp", (DL_FUNC) &_SMC5_KalmanSamplerCpp, 3},
    {"_SMC5_dmvnrmArma", (DL_FUNC) &_SMC5_dmvnrmArma, 5},
    {"_SMC5_dnrmArma", (DL_FUNC) &_SMC5_dnrmArma, 4},
    {"_SMC5_mvrnormArma", (DL_FUNC) &_SMC5_mvrnormArma, 4},
    {"_SMC5_rnormArma", (DL_FUNC) &_SMC5_rnormArma, 3},
    {"_SMC5_logAddition", (DL_FUNC) &_SMC5_logAddition, 2},
    {"_SMC5_logAdditionSum", (DL_FUNC) &_SMC5_logAdditionSum, 1},
    {"_SMC5_ProbSampleReplace", (DL_FUNC) &_SMC5_ProbSampleReplace, 3},
    {"_SMC5_checkDiagonal", (DL_FUNC) &_SMC5_checkDiagonal, 1},
    {"_SMC5_checkSymmetric", (DL_FUNC) &_SMC5_checkSymmetric, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SMC5(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
